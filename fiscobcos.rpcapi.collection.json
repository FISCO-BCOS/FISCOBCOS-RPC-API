{
	"info": {
		"_postman_id": "0a52b1fd-a30b-4c42-ae0c-8f220497a489",
		"name": "fiscobcos3.0 rpc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26671222"
	},
	"item": [
		{
			"name": "getObserverList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test the response body",
							"pm.test(\"Response has id, jsonrpc and result\", function(){",
							"    pm.response.to.have.jsonBody(\"id\");",
							"    pm.response.to.have.jsonBody(\"jsonrpc\");",
							"    pm.response.to.have.jsonBody(\"result\");",
							"});",
							"",
							"// test at least one consensus node",
							"pm.test(\"Result array contains only one element\", function(){",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.length).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getObserverList\",\n    \"params\":[1],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getSealerList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"test getSealer\", function(){",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonBody(\"result\");",
							"    pm.expect(pm.response.text()).to.include(\"nodeID\");",
							"    pm.expect(pm.response.text()).to.include(\"weight\");",
							"",
							"});",
							"",
							"//Test the response body",
							"pm.test(\"Response has id, jsonrpc and result\", function(){",
							"    pm.response.to.have.jsonBody(\"id\");",
							"    pm.response.to.have.jsonBody(\"jsonrpc\");",
							"    pm.response.to.have.jsonBody(\"result\");",
							"});",
							"",
							"// test at least one consensus node",
							"pm.test(\"Result array contains only one element\", function(){",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getSealerList\",\n    \"params\":[1],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getBlockNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"test getBlockNumber\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result is >= 0\", function () {",
							"    pm.expect(pm.response.json().result).to.at.least(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getBlockNumber\",\n    \"params\":[\"group0\",\"node0\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getTotalTransactionCount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be in JSON format\", function () { ",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Block number should be a positive integer\", function () { ",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.result.blockNumber).to.at.least(0); ",
							"});",
							"",
							"pm.test(\"Failed transaction count should be an integer\", function () { ",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.result.failedTransactionCount).to.be.an('number'); ",
							"});",
							"",
							"pm.test(\"Transaction count should be an integer\", function () { var jsonData = pm.response.json(); pm.expect(jsonData.result.transactionCount).to.be.an('number'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getTotalTransactionCount\",\n    \"params\":[\"group0\",\"node0\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getBlockByNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has result object\", function () {",
							"    pm.response.to.have.jsonBody(\"result\");",
							"});",
							"",
							"pm.test(\"Result object should have consensusWeights array\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.consensusWeights).to.be.an('array').lengthOf.that.is.at.least(0);",
							"});",
							"",
							"pm.test(\"Result object should have extraData property with a value of '0x'\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.extraData).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Result object should have gasUsed property with a value of '0'\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.gasUsed).to.equal(\"0\");",
							"});",
							"",
							"pm.test(\"Result object should have hash property with a valid hash value\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.hash).to.match(/0x[0-9a-f]{64}/);",
							"});",
							"",
							"pm.test(\"Result object should have number property with a valid block number\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.number).to.be.a('number').that.is.at.least(0);",
							"});",
							"",
							"pm.test(\"Result object should have parentInfo array with 1 element\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.parentInfo).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Result object should have receiptsRoot property with a valid hash value\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.receiptsRoot).to.match(/0x[0-9a-f]{64}/);",
							"});",
							"",
							"pm.test(\"Result object should have sealer property with a valid sealer index\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.sealer).to.be.a('number').that.is.at.least(0);",
							"});",
							"",
							"pm.test(\"Result object should have stateRoot property with a valid hash value\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.stateRoot).to.match(/0x[0-9a-f]{64}/);",
							"});",
							"",
							"pm.test(\"Result object should have transactions array with 1 element\", function () {",
							"    const result = pm.response.json().result;",
							"    pm.expect(result.transactions).to.be.an('array');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getBlockByNumber\",\n    \"params\":[\"group0\",\"node0\",0,false,false],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getBlockByHash",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Error message is GetBlockNumberByHash error\", function () { ",
							"    const error = pm.response.json().error;",
							"    pm.expect(pm.response.json()).to.have.keys(['error', 'id', 'jsonrpc']);",
							"    pm.expect(pm.response.json().error).to.have.keys(['code', 'message']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getBlockByHash\",\n    \"params\":[\"group0\",\"node0\",\"0x\",true,true],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getBlockHashByNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has a valid result format\", function () {",
							"    pm.expect(pm.response.json().result).to.match(/^0x[0-9a-fA-F]+$/); ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getBlockHashByNumber\",\n    \"params\":[\"group0\",\"node0\",4],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "sendTransaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// 检查必须的字段存在",
							"pm.test(\"检查必须的字段存在\", function () {",
							"    pm.expect(jsonData.id).to.exist;",
							"    pm.expect(jsonData.jsonrpc).to.exist;",
							"    pm.expect(jsonData.result).to.exist;",
							"});",
							"",
							"// 检查字段类型和值",
							"pm.test(\"检查字段类型和值\", function () {",
							"    pm.expect(jsonData.id).to.be.an(\"number\");",
							"    pm.expect(jsonData.jsonrpc).to.equal(\"2.0\");",
							"",
							"    const result = jsonData.result;",
							"    pm.expect(result.blockNumber).to.be.an(\"number\");",
							"    pm.expect(result.checksumContractAddress).to.be.a(\"string\");",
							"    pm.expect(result.contractAddress).to.be.a(\"string\");",
							"    pm.expect(result.extraData).to.be.a(\"string\");",
							"    pm.expect(result.from).to.be.a(\"string\");",
							"    pm.expect(result.gasUsed).to.be.a(\"string\");",
							"    pm.expect(result.hash).to.be.a(\"string\");",
							"    pm.expect(result.input).to.be.a(\"string\");",
							"    pm.expect(result.logEntries).to.be.an(\"array\");",
							"    pm.expect(result.message).to.be.a(\"string\");",
							"    pm.expect(result.output).to.be.a(\"string\");",
							"    pm.expect(result.status).to.be.a(\"number\");",
							"    pm.expect(result.to).to.be.a(\"string\");",
							"    pm.expect(result.transactionHash).to.be.a(\"string\");",
							"    pm.expect(result.version).to.be.a(\"number\");",
							"});",
							"",
							"// 检查字段值是否正确",
							"pm.test(\"检查字段值\", function () {",
							"    const result = jsonData.result;",
							"    pm.expect(result.blockNumber).to.equal(1);",
							"    pm.expect(result.extraData).to.equal(\"\");",
							"    pm.expect(result.hash).to.match(/^0x[0-9a-fA-F]+$/); ",
							"    pm.expect(result.transactionHash).to.match(/^0x[0-9a-fA-F]+$/);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"sendTransaction\",\n    \"params\":[\"group0\",\"\",\"0x1a1c2606636861696e30360667726f7570304101f556243537373339383638383434323930383335383537323937373436343135383134333737377d0001046b608060405234801561001057600080fd5b5060408051808201909152600d8082526c48656c6c6f2c20576f726c642160981b60209092019182526100459160009161004b565b5061011f565b828054610057906100e4565b90600052602060002090601f01602090048101928261007957600085556100bf565b82601f1061009257805160ff19168380011785556100bf565b828001600101855582156100bf579182015b828111156100bf5782518255916020019190600101906100a4565b506100cb9291506100cf565b5090565b5b808211156100cb57600081556001016100d0565b600181811c908216806100f857607f821691505b6020821081141561011957634e487b7160e01b600052602260045260246000fd5b50919050565b61033d8061012e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ed3885e1461003b5780636d4ce63c14610050575b600080fd5b61004e6100493660046101c6565b61006e565b005b610058610085565b6040516100659190610277565b60405180910390f35b8051610081906000906020840190610117565b5050565b606060008054610094906102cc565b80601f01602080910402602001604051908101604052809291908181526020018280546100c0906102cc565b801561010d5780601f106100e25761010080835404028352916020019161010d565b820191906000526020600020905b8154815290600101906020018083116100f057829003601f168201915b5050505050905090565b828054610123906102cc565b90600052602060002090601f016020900481019282610145576000855561018b565b82601f1061015e57805160ff191683800117855561018b565b8280016001018555821561018b579182015b8281111561018b578251825591602001919060010190610170565b5061019792915061019b565b5090565b5b80821115610197576000815560010161019c565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101d857600080fd5b813567ffffffffffffffff808211156101f057600080fd5b818401915084601f83011261020457600080fd5b813581811115610216576102166101b0565b604051601f8201601f19908116603f0116810190838211818310171561023e5761023e6101b0565b8160405282815287602084870101111561025757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156102a457858101830151858201604001528201610288565b818111156102b6576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806102e057607f821691505b6020821081141561030157634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122070eb57da50846b381da60d3f4647c7040d72aad053c50d4ed6e571fbe2042aff64736f6c634300080b003387000001565b7b22696e70757473223a5b5d2c2273746174654d75746162696c697479223a226e6f6e70617961626c65222c2274797065223a22636f6e7374727563746f72227d2c7b22696e70757473223a5b5d2c226e616d65223a22676574222c226f757470757473223a5b7b22696e7465726e616c54797065223a22737472696e67222c226e616d65223a22222c2274797065223a22737472696e67227d5d2c2273746174654d75746162696c697479223a2276696577222c2274797065223a2266756e6374696f6e227d2c7b22696e70757473223a5b7b22696e7465726e616c54797065223a22737472696e67222c226e616d65223a226e222c2274797065223a22737472696e67227d5d2c226e616d65223a22736574222c226f757470757473223a5b5d2c2273746174654d75746162696c697479223a226e6f6e70617961626c65222c2274797065223a2266756e6374696f6e227d5d0b2d000020f5d6e8153fc9887c6e50c19311c7e00e9c1fdd5285ff68fa25bb6a4ecf3ec62f3d0000414787c05b751dacc2f0a7021643d9828856b4c616b7c61a0ee243afaf05b269a85e9fda35039249de4494d199c722f450c7db08406c0e87ef55eb358584e58c0401\",false],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getTransaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"// 检查字段是否存在",
							"pm.test(\"检查字段是否存在\", function () {",
							"    pm.expect(jsonData.id).to.exist;",
							"    pm.expect(jsonData.jsonrpc).to.exist;",
							"    pm.expect(jsonData.result).to.exist;",
							"});",
							"",
							"// 检查字段类型是否正确",
							"pm.test(\"检查字段类型是否正确\", function () {",
							"    // 检查 id 字段类型",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"",
							"    // 检查 jsonrpc 字段类型",
							"    pm.expect(jsonData.jsonrpc).to.be.a(\"string\");",
							"",
							"    // 检查 result 字段类型",
							"    pm.expect(jsonData.result).to.be.an(\"object\");",
							"    const result = jsonData.result;",
							"    pm.expect(result.abi).to.be.a(\"string\");",
							"    pm.expect(result.blockLimit).to.be.a(\"number\");",
							"    pm.expect(result.chainID).to.be.a(\"string\");",
							"    pm.expect(result.extraData).to.be.a(\"string\");",
							"    pm.expect(result.from).to.be.a(\"string\");",
							"    pm.expect(result.groupID).to.be.a(\"string\");",
							"    pm.expect(result.hash).to.be.a(\"string\");",
							"    pm.expect(result.importTime).to.be.a(\"number\");",
							"    pm.expect(result.input).to.be.a(\"string\");",
							"    pm.expect(result.nonce).to.be.a(\"string\");",
							"    pm.expect(result.signature).to.be.a(\"string\");",
							"    pm.expect(result.to).to.be.a(\"string\");",
							"    pm.expect(result.version).to.be.a(\"number\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getTransaction\",\n    \"params\":[\"group0\",\"node0\",\"0xf5d6e8153fc9887c6e50c19311c7e00e9c1fdd5285ff68fa25bb6a4ecf3ec62f\",false],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getTransactionReceipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// 检查必须的字段存在",
							"pm.test(\"检查必须的字段存在\", function () {",
							"    pm.expect(jsonData.id).to.exist;",
							"    pm.expect(jsonData.jsonrpc).to.exist;",
							"    pm.expect(jsonData.result).to.exist;",
							"});",
							"",
							"// 检查字段类型",
							"pm.test(\"检查字段类型\", function () {",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"    pm.expect(jsonData.jsonrpc).to.be.a(\"string\");",
							"    pm.expect(jsonData.result).to.be.an(\"object\");",
							"",
							"    const result = jsonData.result;",
							"    pm.expect(result.blockNumber).to.be.a(\"number\");",
							"    pm.expect(result.checksumContractAddress).to.be.a(\"string\");",
							"    pm.expect(result.contractAddress).to.be.a(\"string\");",
							"    pm.expect(result.extraData).to.be.a(\"string\");",
							"    pm.expect(result.from).to.be.a(\"string\");",
							"    pm.expect(result.gasUsed).to.be.a(\"string\");",
							"    pm.expect(result.hash).to.be.a(\"string\");",
							"    pm.expect(result.input).to.be.a(\"string\");",
							"    pm.expect(result.logEntries).to.be.an(\"array\");",
							"    pm.expect(result.message).to.be.a(\"string\");",
							"    pm.expect(result.output).to.be.a(\"string\");",
							"    pm.expect(result.receiptProof).to.be.an(\"array\");",
							"    pm.expect(result.status).to.be.a(\"number\");",
							"    pm.expect(result.to).to.be.a(\"string\");",
							"    pm.expect(result.transactionHash).to.be.a(\"string\");",
							"    pm.expect(result.transactionProof).to.be.an(\"array\");",
							"    pm.expect(result.txReceiptProof).to.be.an(\"array\");",
							"    pm.expect(result.version).to.be.a(\"number\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getTransactionReceipt\",\n    \"params\":[\"group0\",\"node0\",\"0xf5d6e8153fc9887c6e50c19311c7e00e9c1fdd5285ff68fa25bb6a4ecf3ec62f\",true],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getPendingTxSize",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for successful response",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for successful result",
							"pm.test(\"Result is successful\", function () {",
							"    pm.response.to.have.jsonBody('result');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getPendingTxSize\",\n    \"params\":[\"group0\",\"node0\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getPeers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Response Tests",
							"pm.test(\"Response is OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response includes a result object with required keys\", function () {",
							"    var result = pm.response.json().result;",
							"    pm.expect(result).to.have.property(\"endPoint\");",
							"    pm.expect(result).to.have.property(\"groupNodeIDInfo\");",
							"    pm.expect(result).to.have.property(\"p2pNodeID\");",
							"    pm.expect(result).to.have.property(\"peers\");",
							"});",
							"",
							"pm.test(\"groupNodeIDInfo contains an array of groups with nodeIDList arrays\", function () {",
							"    var groupNodeIDInfo = pm.response.json().result.groupNodeIDInfo;",
							"    pm.expect(groupNodeIDInfo).to.be.an(\"array\");",
							"    groupNodeIDInfo.forEach(function (group) {",
							"        pm.expect(group).to.have.property(\"group\");",
							"        pm.expect(group).to.have.property(\"nodeIDList\").that.is.an(\"array\");",
							"    });",
							"});",
							"",
							"pm.test(\"peers contains an array of objects with required keys\", function () {",
							"    var peers = pm.response.json().result.peers;",
							"    pm.expect(peers).to.be.an(\"array\");",
							"    peers.forEach(function (peer) {",
							"        pm.expect(peer).to.have.property(\"endPoint\");",
							"        pm.expect(peer).to.have.property(\"groupNodeIDInfo\");",
							"        pm.expect(peer).to.have.property(\"p2pNodeID\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getPeers\",\n    \"params\":[\"127.0.0.1:20200\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getSyncStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"return valid JSON response\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.have.jsonBody;",
							"});",
							"",
							"pm.test(\"contain result field\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('result');",
							"});",
							"",
							"pm.test(\"result contain blockNumber field\", function () {",
							"    pm.expect(pm.response.json().result).include('blockNumber');",
							"});",
							"",
							"//检查result字段是否包含genesisHash字段",
							"pm.test(\"result contain genesisHash field\", function () {",
							"    pm.expect(pm.response.json().result).include('genesisHash');",
							"});",
							"",
							"//检查result字段是否包含isSyncing字段",
							"pm.test(\"result contain isSyncing field\", function () {",
							"    pm.expect(pm.response.json().result).include('isSyncing');",
							"});",
							"",
							"//检查result字段是否包含knownHighestNumber字段",
							"pm.test(\"result contain knownHighestNumber field\", function () {",
							"    pm.expect(pm.response.json().result).include('knownHighestNumber');",
							"});",
							"",
							"//检查result字段是否包含knownLatestHash字段",
							"pm.test(\"result contain knownLatestHash field\", function () {",
							"    pm.expect(pm.response.json().result).include('knownLatestHash');",
							"});",
							"",
							"//检查result字段是否包含latestHash字段",
							"pm.test(\"result contain latestHash字 field\", function () {",
							"    pm.expect(pm.response.json().result).include('latestHash');",
							"});",
							"",
							"//检查result字段是否包含nodeID字段",
							"pm.test(\"result contain nodeID field\", function () {",
							"    pm.expect(pm.response.json().result).include('nodeID');",
							"});",
							"",
							"//检查result字段是否包含peers字段",
							"pm.test(\"result contain peers field\", function () {",
							"    pm.expect(pm.response.json().result).include('peers');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getSyncStatus\",\n    \"params\":[\"group0\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getSystemConfigByKey",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes blockNumber field\", function () {",
							"    pm.expect(pm.response.json().result).to.have.property(\"blockNumber\");",
							"});",
							"",
							"pm.test(\"Response includes value field\", function () {",
							"    pm.expect(pm.response.json().result).to.have.property(\"value\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getSystemConfigByKey\",\n    \"params\":[\"group0\",\"node0\",\"tx_count_limit\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getPbftView",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should have 'result' field\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"result\");",
							"});",
							"",
							"pm.test(\"Response should have 'result' field\", function () {",
							"    pm.expect(pm.response.json().result).to.be.a(\"number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getPbftView\",\n    \"params\":[\"group0\",\"node0\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getConsensusStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is valid JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Result includes blockNumber\", function () { ",
							"    pm.expect(pm.response.json().result).to.include(\"blockNumber\"); ",
							"});",
							"",
							"pm.test(\"Result includes consensusNodeList\", function () { ",
							"    pm.expect(pm.response.json().result).to.include(\"consensusNodeList\");",
							"});",
							"",
							"pm.test(\"Result includes nodeID\", function () { ",
							"    pm.expect(pm.response.json().result).to.include(\"nodeID\"); ",
							"});",
							"",
							"pm.test(\"Result includes weight\", function () { ",
							"    pm.expect(pm.response.json().result).to.include(\"weight\"); ",
							"});",
							"",
							"pm.test(\"Result includes hash\", function () { ",
							"    pm.expect(pm.response.json().result).to.include(\"hash\"); ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getConsensusStatus\",\n    \"params\":[\"group0\",\"node0\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getGroupInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response is valid JSON",
							"pm.test(\"Valid JSON response\", function() {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"// Check if the response has a result",
							"pm.test(\"Response has result\", function() {",
							"    pm.response.to.have.jsonBody(\"result\");",
							"});",
							"",
							"// Check if the response is successful ",
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200); ",
							"});",
							"",
							"// Check if the chainID is correct",
							"pm.test(\"Correct chainID\", function() {",
							"    pm.expect(pm.response.json().result.chainID).to.eql(\"chain0\");",
							"});",
							"",
							"// Check if the groupID is correct",
							"pm.test(\"Correct groupID\", function() {",
							"    pm.expect(pm.response.json().result.groupID).to.eql(\"group0\");",
							"});",
							"",
							"// Check if the nodeList is an array",
							"pm.test(\"nodeList is an array\", function() {",
							"    pm.expect(pm.response.json().result.nodeList).to.be.an(\"array\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getGroupInfo\",\n    \"params\":[\"group0\",\"node1\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getGroupList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has result\", function () {",
							"    pm.response.to.have.jsonBody(\"result\");",
							"});",
							"",
							"pm.test(\"Response code is 0\", function () {",
							"    pm.response.to.have.jsonBody(\"result.code\", 0);",
							"});",
							"",
							"pm.test(\"Response has groupList\", function () {",
							"    pm.response.to.have.jsonBody(\"result.groupList\");",
							"});",
							"",
							"pm.test(\"Response has msg\", function () {",
							"    pm.response.to.have.jsonBody(\"result.msg\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getGroupList\",\n    \"params\":[\"group0\",\"node1\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getGroupInfoList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains result key and value is an array\", function () {",
							"    const res = pm.response.json();",
							"",
							"    pm.expect(res.result).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Response body should contain 'chainID'\", function () { ",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.result[0].chainID).to.exist; });",
							"",
							"pm.test(\"Response body should contain 'genesisConfig'\", function () { ",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.result[0].genesisConfig).to.exist; });",
							"",
							"pm.test(\"Response body should contain 'groupID'\", function () { ",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.result[0].groupID).to.exist; });",
							"",
							"pm.test(\"Response body should contain 'nodeList'\", function () { ",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.result[0].nodeList).to.exist; });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getGroupInfoList\",\n    \"params\":[\"group0\",\"node1\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getGroupPeers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Result should be an array\", function () { pm.expect(jsonData.result).to.be.an(\"array\"); });",
							"",
							"pm.test(\"Result should be an array with at least 1 elements\", function () { pm.expect(jsonData.result).lengthOf.that.is.at.least(1); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getGroupPeers\",\n    \"params\":[\"group0\",\"node1\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getGroupNodeInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has null result\", function () { ",
							"    pm.expect(pm.response.json().result).to.eql(null);",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getGroupNodeInfo\",\n    \"params\":[\"group0\",\"node0\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "call",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Error message is displayed\", function () {",
							"    pm.expect(pm.response.json().error.message).to.eql(\"Call address is empty\");",
							"});",
							"",
							"pm.test(\"Error code is correct\", function () {",
							"    pm.expect(pm.response.json().error.code).to.eql(-70000);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"call\",\n    \"params\":[\"group0\",\"\",\"\",\"aaaa\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getCode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body has a JSON RPC property\", function () {",
							"   pm.response.to.have.jsonBody(\"jsonrpc\");",
							"});",
							"",
							"pm.test(\"Response body has a result property\", function () {",
							"   pm.response.to.have.jsonBody(\"result\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getCode\",\n    \"params\":[\"group0\",\"node0\",\"0x\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		},
		{
			"name": "getABI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body has a JSON RPC property\", function () {",
							"   pm.response.to.have.jsonBody(\"jsonrpc\");",
							"});",
							"",
							"pm.test(\"Response body has a result property\", function () {",
							"   pm.response.to.have.jsonBody(\"result\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\":2.0,\n    \"method\": \"getABI\",\n    \"params\":[\"group0\",\"node0\",\"0x\"],\n    \"id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:20200",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "20200"
				}
			},
			"response": []
		}
	]
}